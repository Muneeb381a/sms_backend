-- table for classes

CREATE TABLE classes (
    id SERIAL PRIMARY KEY,
    class_name VARCHAR(100) NOT NULL,
    section VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_class_section UNIQUE (class_name, section)
);
CREATE INDEX idx_classes_class_name ON classes(class_name);


ALTER TABLE classes ADD COLUMN version INTEGER DEFAULT 0;

-- table for sections
CREATE TABLE sections (
    id SERIAL PRIMARY KEY,
    class_id INTEGER NOT NULL,
    section_name VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE,
    CONSTRAINT unique_class_section UNIQUE (class_id, section_name)
);

-- table for students
CREATE TABLE students (
id SERIAL PRIMARY KEY,
class_id INTEGER NOT NULL REFERENCES classes(id) ON DELETE CASCADE,
section_id INTEGER REFERENCES sections(id) ON DELETE SET NULL,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
email VARCHAR(100) NOT NULL UNIQUE,
image_url TEXT,
image_public_id TEXT,
pdf_url TEXT,
pdf_public_id TEXT,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT valid_email CHECK(email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

ALTER TABLE students
	ADD COLUMN IF NOT EXISTS roll_number VARCHAR(20),
	ADD COLUMN IF NOT EXISTS dob DATE,
	ADD COLUMN IF NOT EXISTS whatsapp_number VARCHAR(15),
	ADD COLUMN IF NOT EXISTS cell_number VARCHAR(15),
	ADD COLUMN IF NOT EXISTS address TEXT,
	ADD COLUMN IF NOT EXISTS gender VARCHAR(10) CHECK (gender IN ('male', 'female', 'other')),
	ADD COLUMN IF NOT EXISTS nationality VARCHAR(50),
	ADD COLUMN IF NOT EXISTS guardian_name VARCHAR(100),
	ADD COLUMN IF NOT EXISTS emergency_contact VARCHAR(15),
	ADD COLUMN IF NOT EXISTS relegion VARCHAR(50),
	ADD COLUMN IF NOT EXISTS nationality VARCHAR(50) DEFAULT 'Pakistani',
	ADD COLUMN IF NOT EXISTS cnic_number VARCHAR(20),
	ADD COLUMN IF NOT EXISTS b_form_number VARCHAR(20),
	ADD COLUMN IF NOT EXISTS disability BOOLEAN DEFAULT FALSE,
	ADD COLUMN IF NOT EXISTS admission_date DATE,
	ADD COLUMN IF NOT EXISTS academic_session VARCHAR(20),
	ADD COLUMN IF NOT EXISTS previous_school VARCHAR(20),
	ADD COLUMN IF NOT EXISTS student_status VARCHAR(20) CHECK (student_status IN ('active', 'left', 'graduated', 'expelled')) DEFAULT 'active',
	ADD COLUMN IF NOT EXISTS guardian_relationship VARCHAR(20),
	ADD COLUMN IF NOT EXISTS guardian_cnic VARCHAR(20),
	ADD COLUMN IF NOT EXISTS guardian_occupation VARCHAR(20),
	ADD COLUMN IF NOT EXISTS city  VARCHAR(50),
	ADD COLUMN IF NOT EXISTS district VARCHAR(50),
	ADD COLUMN IF NOT EXISTS province VARCHAR(50),
	ADD COLUMN IF NOT EXISTS postal_code VARCHAR(50);

    ALTER TABLE students
  ADD CONSTRAINT valid_whatsapp_number CHECK (whatsapp_number ~* '^\+?[1-9]\d{1,14}$|^$'),
  ADD CONSTRAINT valid_cell_number CHECK (cell_number ~* '^\+?[1-9]\d{1,14}$|^$'),
  ADD CONSTRAINT unique_roll_number_per_class_section UNIQUE (class_id, section_id, roll_number);

-- index for students for faster quries
CREATE INDEX idx_students_class_id ON students(class_id);
CREATE INDEX idx_students_section_id ON students(section_id);
CREATE INDEX idx_students_email ON students(email);
CREATE INDEX IF NOT EXISTS idx_students_roll_number ON students(roll_number);

-- store fee types
CREATE TABLE fee_types (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) UNIQUE NOT NULL, -- e.g., tuition, sports, library, admission, annual, miscellaneous
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Defines fee structures per class and academic year
CREATE TABLE fee_structures (
  id SERIAL PRIMARY KEY,
  class_id INTEGER NOT NULL REFERENCES classes(id) ON DELETE CASCADE,
  fee_type_id INTEGER NOT NULL REFERENCES fee_types(id) ON DELETE RESTRICT,
  amount DECIMAL(10, 2) NOT NULL,
  frequency VARCHAR(20) NOT NULL CHECK (frequency IN ('monthly', 'annual', 'one-time')),
  academic_year VARCHAR(9) NOT NULL CHECK (academic_year ~ '^\d{4}-\d{4}$'), -- e.g., 2024-2025
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Stores fee vouchers
CREATE TABLE fee_vouchers (
  id SERIAL PRIMARY KEY,
  student_id INTEGER NOT NULL REFERENCES students(id) ON DELETE CASCADE,
  due_date DATE NOT NULL,
  paid_amount DECIMAL(10, 2) DEFAULT 0.00,
  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'partial', 'paid')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT unique_student_due_date UNIQUE (student_id, due_date)
);

-- Stores individual fee items for each voucher
CREATE TABLE fee_voucher_details (
  id SERIAL PRIMARY KEY,
  voucher_id INTEGER NOT NULL REFERENCES fee_vouchers(id) ON DELETE CASCADE,
  fee_type_id INTEGER NOT NULL REFERENCES fee_types(id) ON DELETE RESTRICT,
  amount DECIMAL(10, 2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- table for attendance
CREATE TABLE attendance (
  id SERIAL PRIMARY KEY,
  student_id INTEGER NOT NULL REFERENCES students(id) ON DELETE CASCADE,
  class_id INTEGER NOT NULL REFERENCES classes(id) ON DELETE CASCADE,
  attendance_date DATE NOT NULL,
  status VARCHAR(10) NOT NULL CHECK (status IN ('present', 'absent')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (student_id, class_id, attendance_date)
);

-- Index for faster queries
CREATE INDEX idx_attendance_date ON attendance (attendance_date);
CREATE INDEX idx_attendance_student_class ON attendance (student_id, class_id);



-- table for teachers
CREATE TABLE teachers (
teacher_id VARCHAR(10) PRIMARY KEY,
first_name VARCHAR(70) NOT NULL,
last_name VARCHAR(70) NOT NULL,
father_name VARCHAR(70) NOT NULL,
email VARCHAR(100) NOT NULL UNIQUE,
phone VARCHAR(20),
address_line1 VARCHAR(100),
address_line2 VARCHAR(100),
city VARCHAR(50),
postal_code VARCHAR(20),
country VARCHAR(50),
date_of_birth DATE,
hire_date DATE NOT NULL,
years_of_experience INT CHECK (years_of_experience >= 0),
employment_status VARCHAR(20) NOT NULL CHECK (employment_status IN ('Full-Time', 'Part-Time', 'Contract', 'Retired', 'Resigned')),
photo_url TEXT,
resume_url TEXT,
linkedin_url TEXT,
emergency_contact_name VARCHAR(100),
emergency_contact_phone VARCHAR(25),
blood_group VARCHAR(10),
gender VARCHAR(10) CHECK (gender IN ('Male','Female', 'Other')),
marital_status VARCHAR(25) CHECK (marital_status IN ('Single', 'Married', 'Divorced', 'Widowed')),
nationality VARCHAR(50),
teaching_license_number VARCHAR(50) UNIQUE,
is_active BOOLEAN DEFAULT TRUE,
educations JSONB NOT NULL DEFAULT '[]'::JSONB,
subjects_taught TEXT[] NOT NULL DEFAULT '{}',
cnic VARCHAR(50) UNIQUE
);

-- alter table
ALTER TABLE teachers
ADD COLUMN  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
ADD COLUMN  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP


-- Indexing for teachers for better searching
CREATE INDEX idx_teachers_first_name ON teachers(first_name);
CREATE INDEX idx_teachers_email ON teachers(email);


-- create a function to update the updated time stamp
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
	NEW.updated_at = CURRENT_TIMESTAMP;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- create a trigger to call the update _time stamp function
CREATE TRIGGER trigger_update_timestamp
BEFORE UPDATE ON teachers
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



-- creating sequence to generate regestaration number automatically
CREATE SEQUENCE student_reg_seq START WITH 1 INCREMENT BY 1;

ALTER TABLE students
ADD COLUMN regestration_number TEXT;



CREATE TABLE notifications (
    notification_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type TEXT CHECK (type IN ('announcement', 'alert', 'reminder')) NOT NULL,
    target_group TEXT CHECK (target_group IN ('all', 'students', 'teachers', 'parents')) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON notifications
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TABLE notification_recipients (
    recipient_id SERIAL PRIMARY KEY,
    notification_id INT NOT NULL,
    group_name TEXT CHECK(group_name IN('all', 'students', 'teachers', 'parents')) NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    read_at TIMESTAMP NOT NULL,
    FOREIGN KEY (notification_id) REFERENCES notifications(notification_id) ON DELETE CASCADE,
    UNIQUE (notification_id, group_name)
);

ALTER TABLE notification_recipients ALTER COLUMN read_at DROP NOT NULL;


CREATE TABLE diaries (
    id SERIAL PRIMARY KEY,
    class_id INTEGER NOT NULL REFERENCES classes(id) ON DELETE CASCADE,
    diary_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_class_date UNIQUE (class_id, diary_date)
);

CREATE INDEX idx_diaries_class_id ON diaries(class_id);
CREATE INDEX idx_diaries_class_id_date ON diaries(class_id, diary_date);

CREATE TRIGGER trigger_update_diaries_updated_at
BEFORE UPDATE ON diaries
FOR EACH ROW
EXECUTE FUNCTION update_updated_at();
